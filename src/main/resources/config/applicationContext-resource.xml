<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
     default-autowire="byName" default-lazy-init="false">
	
	<!-- 所有注解的总处理器 -->
	<context:annotation-config />
	
	<!-- 属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:config/jdbc.properties</value>
			</list>
		</property>
	</bean>
		
	<!-- 数据源定义,使用Apache DBCP 连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
    <!-- 用于持有ApplicationContext,可以使用ApplicationContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<!-- <bean class="cn.org.rapid_framework.util.ApplicationContextHolder"/> -->
    
	<!-- 支持 @Transactional 标记 -->
	<tx:annotation-driven/>

	<!-- 支持 @AspectJ 标记-->
	<aop:aspectj-autoproxy/>

	<!-- 以AspectJ方式 定义 AOP -->
	<aop:config proxy-target-class="true">
		<!--  
		<aop:advisor pointcut="execution(* javacommon.base.BaseManager.*(..))" advice-ref="txAdvice"/>
		<aop:advisor pointcut="execution(* javacommon.base.BaseService.*(..))" advice-ref="txAdvice"/>
		-->
		<aop:advisor pointcut="execution(* com.yunbo.*..*.service.*Manager.*(..))" advice-ref="txAdvice"/>
		<aop:advisor pointcut="execution(* com.yunbo.*..*.service.*ManagerTest.*(..))" advice-ref="txAdvice"/>
		<aop:advisor pointcut="execution(* com.yunbo.*..*.service.*Service.*(..))" advice-ref="txAdvice"/>
		<aop:advisor pointcut="execution(* com.yunbo.*..*.service.*ServiceTest.*(..))" advice-ref="txAdvice"/>
	</aop:config>

	<!-- 基本事务定义,使用transactionManager作事务管理,默认get* find*方法的事务为readonly,其余方法按默认设置.
			 默认的设置请参考Spring文档事务一章. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="has*" read-only="true" />
			<tx:method name="check*" read-only="true" />
			<tx:method name="exist*" read-only="true" />
			<tx:method name="is*" read-only="true" />
			<tx:method name="assign*" />
			<tx:method name="set*" />
			<tx:method name="copy*" />
			<tx:method name="create*" />
			<tx:method name="insert*" />
			<tx:method name="append*" />
			<tx:method name="update*" />
			<tx:method name="add*" />
			<tx:method name="save*" />
			<tx:method name="edit*" />
			<tx:method name="modify*" />
			<tx:method name="change*" />
			<tx:method name="delete*" />
			<tx:method name="remove*" />
			<tx:method name="pause*" />
			<tx:method name="resume*" />
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
</beans>